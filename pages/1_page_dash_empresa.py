#importando as bibliotecas
import pandas as pd
import seaborn as sns
import plotly.express as px
import matplotlib.pyplot as plt
import folium
from haversine import haversine
import streamlit as st
import datetime
from PIL import Image
from streamlit_folium import folium_static

st.set_page_config(page_title='Dashboard Empresa', page_icon='游늳')

# ===================================================
# Fun칞칫es
# ===================================================

def clean_code(df):
    """
    Esta fun칞칚o tem a responsabilidade de limpar o dataframe.
    Tipos de limpeza:
    1. Remo칞칚o dos dados NaN
    2. Mudan칞a do tipo da coluna de dados
    3. Remo칞칚o dos espa칞os das vari치veis de texto
    4. Formata칞칚o da coluna de datas
    5. Limpeza da coluna de tempo (remo칞칚o do texto da vari치vel num칠rica)
    
    Input: Dataframe
    Output: Dataframe
    """

    #limpeza de dados
    #1. removendo linhas vazias
    columns_to_filter = ['Delivery_person_Age', 'Road_traffic_density', 'City', 'Festival', 'multiple_deliveries', 'Delivery_person_Ratings']
    for col in columns_to_filter:
        df = df[df[col] != 'NaN ']

    #2. convertendo a coluna Delivery_person_Age de texto para n칰mero
    df['Delivery_person_Age'] = df['Delivery_person_Age'].astype(int)

    #3. convertendo a coluna Delivery_person_Ratings de texto para float
    df['Delivery_person_Ratings'] = df['Delivery_person_Ratings'].astype(float)

    #4. convertendo a coluna Order_Date de texto para data
    df['Order_Date'] = pd.to_datetime(df['Order_Date'], dayfirst=True, format='%d-%m-%Y')

    #5. convertendo a coluna multiple_deliveries de texto para n칰mero
    df['multiple_deliveries'] = df['multiple_deliveries'].astype(int)

    #6. Remover espa칞os em branco de todas as linhas das colunas especificadas
    columns_to_strip = ['ID', 'Delivery_person_ID', 'Road_traffic_density', 'Type_of_order', 'Type_of_vehicle', 'Festival', 'City']
    for col in columns_to_strip:
        df.loc[:, col] = df.loc[:, col].str.strip()

    #7. resetar os numeros de index
    df = df.reset_index(drop=True)

    #8. limpando a coluna de time_taken
    df['Time_taken(min)'] = df['Time_taken(min)'].apply( lambda x: x.split('(min) ')[1])
    df['Time_taken(min)'] = df['Time_taken(min)'].astype(int)

    return df


def chart_pedidos_dia (df):
    cols = ['ID', 'Order_Date']
    df_pedidos_dia = df.loc[:,cols].groupby(['Order_Date']).count().reset_index()

    fig = px.bar(df_pedidos_dia,
        x='Order_Date',
        y='ID',
        title='N칰mero de Pedidos x Dia',
        color='ID',
        color_continuous_scale='RdYlGn',
        labels={'ID':'Contagem de Pedidos',
                'Order_Date':'Data'},
        text='ID',
        width=1600,
        height=500
    )
    return fig


def chart_pedidos_por_trafego (df):
    cols=['ID', 'Road_traffic_density']
    df_pedidos_por_trafego = (
        df.loc[:,cols]
            .groupby('Road_traffic_density')
            .count()
            .reset_index()
        )
    df_pedidos_por_trafego['perc_traffic'] = (df_pedidos_por_trafego['ID'] / df_pedidos_por_trafego['ID'].sum()) * 100

    fig=px.pie(df_pedidos_por_trafego,
        'Road_traffic_density',
        'ID',
        title='Distribui칞칚o de Pedidos por Tipo de Tr칙nsito',
        labels={'ID':'Contagem de Pedidos',
                'Road_traffic_density':'Tipo de Tr칙nsito'},
        hole=0.4,
        color_discrete_sequence=px.colors.diverging.Portland,
        width=800,
        height=500
    )
    return fig


def chart_volume_pedidos(df):
    cols=['ID', 'City', 'Road_traffic_density']
    df_volume_pedidos = (
        df.loc[:,cols]
            .groupby(['City', 'Road_traffic_density'])
            .count()
            .reset_index()
    )
    fig=px.scatter(df_volume_pedidos,
            x='City',
            y='Road_traffic_density',
            size='ID', color='City',
            title='Compara칞칚o do Volume de Pedidos por Cidade e Tipo de Tr칙nsito',
            width=800,
            height=500
    )
    return fig


def chart_numero_pedidos_semana(df):
    df['Week_of_year'] = df['Order_Date'].dt.strftime('%U')
    cols = ['ID', 'Week_of_year']
    df_pedidos_semana = (
        df.loc[:,cols]
            .groupby(['Week_of_year'])
            .count()
            .reset_index()
    )
    fig = px.line(df_pedidos_semana,
        x='Week_of_year',
        y='ID',
        title='N칰mero de Pedidos x Semana do Ano',
        labels={
            'ID':'Contagem de Pedidos',
            'Week_of_year':'Semana do Ano'
        },
        text='ID',
        width=1000,
        height=500
    )
    fig.update_traces(
        line=dict(color="#4e62a5"),
        textposition='top right'
    )
    return fig


def chart_numero_pedidos_por_entregador_semana(df):
    df_pedidos_semana = (
        df.loc[:, ["ID", "Week_of_year"]]
            .groupby(["Week_of_year"])
            .count()
            .reset_index()
    )
    df_entregadores_unicos_semana = (
        df.loc[:, ["Delivery_person_ID", "Week_of_year"]]
            .groupby(["Week_of_year"])
            .nunique()
            .reset_index()
    )
    df_aux = pd.merge(df_pedidos_semana, df_entregadores_unicos_semana, how='inner')
    df_aux['order_by_deliver'] = df_aux['ID'] / df_aux['Delivery_person_ID']
    fig = px.line(
        df_aux,
        x='Week_of_year',
        y='order_by_deliver',
        title='N칰mero de Pedidos por entregador x Semana do Ano',
        labels={
            'order_by_deliver':'Pedidos por Entregador',
            'Week_of_year':'Semana do Ano'
        },
        text='order_by_deliver',
        width=1000,
        height=500
    )
    fig.update_traces(
        line=dict(color='#ba4c4c'),
        texttemplate='%{text:.1f}',
        textposition='top right'
    )
    return fig


def map_delivery_lat_long(df):
    df_map_delivery = (
        df.loc[
            :,
            [
                "City",
                "Road_traffic_density",
                "Delivery_location_latitude",
                "Delivery_location_longitude",
            ],
        ]
        .groupby(["City", "Road_traffic_density"])
        .median()
        .reset_index()
    )
    map = folium.Map(
        location=[
            df_map_delivery['Delivery_location_latitude'].mean(),
            df_map_delivery['Delivery_location_longitude'].mean()],
            zoom_start=7
    )
    for index, location_info in df_map_delivery.iterrows():
        folium.Marker(
            [location_info['Delivery_location_latitude'],
            location_info['Delivery_location_longitude']],
            popup=location_info[['City', 'Road_traffic_density']]
    ).add_to(map)
    return map


# ===================================================
# Extra칞칚o arquivo
# ===================================================

#lendo o arquivo importado
df = pd.read_csv('dataset/train.csv')
df_original = df.copy()

#limpando os dados
df = clean_code(df)

# ===================================================
# Layout Sidebar
# ===================================================

st.set_page_config(layout='wide')

st.header('Marketplace - Relat칩rio Empresarial')

image_path = 'images/logo_curry_company.png' 
image = Image.open(image_path)
st.sidebar.image(image, width=210)

st.sidebar.markdown('''---''')

st.sidebar.markdown('## Selecione um filtro de datas de entrega')

min_date = pd.to_datetime(df['Order_Date'].min()).to_pydatetime()
max_date = pd.to_datetime(df['Order_Date'].max()).to_pydatetime()

date_slider = st.sidebar.slider(
    "Intervalo de datas",
    min_value=min_date,
    max_value=max_date,
    value=(min_date, max_date),
    format="DD/MM/YYYY",
    label_visibility='visible'
)

st.sidebar.markdown('''---''')

st.sidebar.markdown('## Selecione um filtro de tipos de tr치fego')

traffic_options = st.sidebar.multiselect(
    'Condi칞칫es de tr치fego',
    ['Low', 'Medium', 'High', 'Jam'],
    default=['Low', 'Medium', 'High', 'Jam']
)

st.sidebar.markdown('''---''')

st.sidebar.markdown('### Desenvolvido por [Matheus Melo](https://www.linkedin.com/in/matheus-melo-borges/)')

#Filtro de data
min_date, max_date = date_slider
df_filtrado = (df['Order_Date'] >= min_date) & (df['Order_Date'] <= max_date)
df = df.loc[df_filtrado, :]

#Filtro de tr칙nsito
df_filtrado = df['Road_traffic_density'].isin(traffic_options)
df = df.loc[df_filtrado, :]

# ===================================================
# Layout no Streamlit
# ===================================================

tab1, tab2, tab3 = st.tabs(['Vis칚o Gerencial', 'Vis칚o T치tica', 'Vis칚o Geogr치fica'])

with tab1:
    with st.container():
        # pergunta de neg칩cio 1 - Quantidade de pedidos por dia
        # processo: realizar a contagem de pedidos e distribuir pela var치vel order_date, apresentar como coluna de barras
        fig = chart_pedidos_dia(df)
        st.plotly_chart(fig, use_container_width=True)
    
    with st.container():
        col1, col2 = st.columns(2)
        with col1:
            # pergunta de neg칩cio 3 - Distribui칞칚o dos pedidos por tipo de tr치fico
            # processo: realizar a contagem de pedidos e distribuir pela var치vel Road_traffic_density, apresentar como gr치fico de pizza
            fig = chart_pedidos_por_trafego(df) 
            st.plotly_chart(fig, use_container_width=True)
        with col2:
            # pergunta de neg칩cio 4 - Compara칞칚o do volume de pedidos por cidade e tipo de tr치fego'
            # processo: realizar a contagem de pedidos e distribuir pela var치vel Road_traffic_density e city, apresentar como gr치fico de bolhas
            fig = chart_volume_pedidos(df)
            st.plotly_chart(fig, use_container_width=True)

with tab2:
    with st.container():
        fig = chart_numero_pedidos_semana(df)
        st.plotly_chart(fig, use_container_width=True)
    
    with st.container():
        fig = chart_numero_pedidos_por_entregador_semana(df)
        st.plotly_chart(fig, use_container_width=True)

with tab3:
    map = map_delivery_lat_long(df)
    folium_static(map, width=1024, height=600)